// default auth methods generated don't follow the required auth spec notably it does not add the MediaBrowser key
// see more https://gist.github.com/nielsvanvelzen/ea047d9028f676185832e51ffaf12a6f
// Parameters
// Key 	Description
// Token 	The access token or API key
// Client 	The name of the client
// Version 	The version of the client
// DeviceId 	A unique id for the device generated by the client
// Device 	The device name
// So we implement a custom auth that takes in existing auth and pass it in with the metadata
// add necessary meta data required by the jelly fin server

import 'dart:async';

import 'package:jellyfin_openapi/api.dart';

class AuthWithMetadata implements Authentication {
  final String? accessToken;
  final JellyFinClientData? data;

  /// Direct device string instead of building it from JellyFinClientData
  final String? deviceString;

  AuthWithMetadata({
    this.accessToken,
    this.data,
    this.deviceString,
  }) {
    assert(!(data != null && deviceString != null));
  }

  String generateAuthString() {
    // 'MediaBrowser Client="$appName Client", Device="${devInfo[0]}", DeviceId=${devInfo[1]}, Version="$appInfo"';
    final result = <String>[];

    if (accessToken != null) {
      result.add('Token="$accessToken"');
    }

    if (data != null) {
      if (data!.client != null) {
        result.add('Client="${data!.client!}"');
      }
      if (data!.deviceId != null) {
        result.add('DeviceId="${data!.deviceId!}"');
      }

      if (data!.version != null) {
        result.add('Version="${data!.version!}"');
      }

      if (data!.device != null) {
        result.add('Device="${data!.device!}"');
      }
    }

    final res = 'MediaBrowser ${result.join(', ')}';
    return res;
  }

  @override
  Future<void> applyToParams(
      List<QueryParam> queryParams, Map<String, String> headerParams) async {
    headerParams['Authorization'] = generateAuthString();
  }
}

class JellyFinClientData {
  final String? client;
  final String? version;
  final String? deviceId;
  final String? device;

  JellyFinClientData({
    this.client,
    this.version,
    this.deviceId,
    this.device,
  });
}
