// default auth methods generated don't follow the required auth spec notably it does not add the MediaBrowser key
// see more https://gist.github.com/nielsvanvelzen/ea047d9028f676185832e51ffaf12a6f
// Parameters
// Key 	Description
// Token 	The access token or API key
// Client 	The name of the client
// Version 	The version of the client
// DeviceId 	A unique id for the device generated by the client
// Device 	The device name
// So we implement a custom auth that takes in existing auth and pass it in with the metadata
// add necessary meta data required by the jelly fin server

import 'dart:async';

import 'package:jellyfin_openapi/api.dart';

class AuthWithMetadata implements Authentication {
  final String accessToken;
  final JellyFinClientData? data;

  /// Direct device string instead of building it from JellyFinClientData
  final String? deviceString;

  AuthWithMetadata({
    required this.accessToken,
    this.data,
    this.deviceString,
  }) {
    if (data != null && deviceString != null) {
      throw Exception(
          'Both data and deviceString cannot be provided, use one or the other');
    }
  }

  String addAccessToken() {
    // if deviceString is given add token to the end
    return '${deviceString!}, Token=${accessToken}';
  }

  String _generateAuthString() {
    // 'MediaBrowser Client="$appName Client", Device="${devInfo[0]}", DeviceId=${devInfo[1]}, Version="$appInfo"';
    if (deviceString != null){
      return addAccessToken();
    }

    String finalString = 'MediaBrowser Token=${accessToken}, ';

    if (data != null) {
      if (data?.client != null) {
        finalString += 'Client=${data!.client!}, ';
      } else if (data?.deviceId != null) {
        finalString += 'DeviceId=${data!.deviceId!}, ';
      } else if (data?.version != null) {
        finalString += 'Version=${data!.version!}, ';
      } else if (data?.device != null) {
        finalString += 'Device=${data!.device!}';
      }
    }

    return finalString;
  }

  @override
  Future<void> applyToParams(
      List<QueryParam> queryParams, Map<String, String> headerParams) async {
    headerParams['Authorization'] = _generateAuthString();
  }
}

class JellyFinClientData {
  final String? client;
  final String? version;
  final String? deviceId;
  final String? device;

  JellyFinClientData({
    this.client,
    this.version,
    this.deviceId,
    this.device,
  });
}
